generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//  ███    ███  ██████  ██████  ███████ ██      ███████
//  ████  ████ ██    ██ ██   ██ ██      ██      ██
//  ██ ████ ██ ██    ██ ██   ██ █████   ██      ███████
//  ██  ██  ██ ██    ██ ██   ██ ██      ██           ██
//  ██      ██  ██████  ██████  ███████ ███████ ███████

/// TODO: replicate mongoose static methods
/// TODO: check prisma capability to regex validate type and id_ fields

model GeoJSON {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  v          Int             @map("__v")
  type       String
  id_        String          @unique(map: "id_1") @map("id")
  properties Json
  geometry   GeoJSONGeometry

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([id], map: "id_1_autocreated")
  @@map("geojsons")
}

model ItemCategory {
  id   String           @id @default(auto()) @map("_id") @db.ObjectId
  v    Int              @map("__v")
  name ItemCategoryName

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  Item      Item[]

  @@index([name], map: "name_1")
  @@map("itemcategories")
}

model Item {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  v              Int      @map("__v")
  name           String
  weight         Float
  quantity       Int
  unit           String
  global         Boolean  @default(false)
  pack_ids       String[] @db.ObjectId
  itemCategoryId String?  @db.ObjectId

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  category ItemCategory? @relation(fields: [itemCategoryId], references: [id])
  owners   User[]
  packs    Pack[]        @relation(fields: [pack_ids], references: [id])

  @@index([name], map: "name_1")
  @@index([weight], map: "weight_1")
  @@index([unit], map: "unit_1")
  @@map("items")
}

model Pack {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  v                 Int          @map("__v")
  name              String
  owner_ids         String[]     @db.ObjectId
  favoritedById     String?      @db.ObjectId
  is_public         Boolean?
  grades            PacksGrades?
  scores            PacksScores?
  type              String?      @default("pack")
  item_ids          String[]     @db.ObjectId
  favourited_by_ids String[]     @db.ObjectId

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  favorites_count Int?
  total_weight    Float?
  totalScore      Int?

  items       Item[] @relation(fields: [item_ids], references: [id])
  favoritedBy User[] @relation(name: "Favourites", fields: [favourited_by_ids], references: [id])
  owners      User[] @relation(name: "Ownership", fields: [owner_ids], references: [id])
  trips       Trip[]

  @@index([name], map: "name_1")
  @@index([is_public], map: "is_public_1")
  @@map("packs")
}

model Template {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  v                Int          @map("__v")
  type             TemplateType
  templateId       String       @db.ObjectId
  isGlobalTemplate Boolean      @default(false)
  createdById      String?      @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User? @relation(fields: [createdById], references: [id])

  @@index([type], map: "type_1")
  @@index([templateId], map: "templateId_1")
  @@index([createdById], map: "createdBy_1")
  @@map("templates")
}

model Trip {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  v           Int      @map("__v")
  name        String
  // should be JSON?
  description String
  // should be JSON?
  duration    String
  weather     String
  start_date  DateTime
  end_date    DateTime
  destination String
  owner_id    String   @db.ObjectId
  is_public   Boolean?
  type        String   @default("trip")
  pack_id     String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User @relation(fields: [owner_id], references: [id])
  packs Pack @relation(fields: [pack_id], references: [id])

  @@index([destination], map: "destination_1")
  @@index([start_date], map: "start_date_1")
  @@index([end_date], map: "end_date_1")
  @@index([is_public], map: "is_public_1")
  @@index([type], map: "type_1")
  @@map("trips")
}

model User {
  id                           String    @id @default(auto()) @map("_id") @db.ObjectId
  v                            Int       @map("__v")
  name                         String
  password                     String
  email                        String
  token                        String?
  code                         String?
  googleId                     String?
  is_certified_guide           Boolean?
  passwordResetToken           String?
  passwordResetTokenExpiration DateTime? @db.Date
  role                         Role      @default(user)
  username                     String    @unique(map: "username_1")
  profileImage                 String?
  preferredWeather             String?
  preferredWeight              String?
  favourite_ids                String[]  @db.ObjectId
  pack_ids                     String[]  @db.ObjectId
  item_id                      String?   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favorites Pack[]     @relation(name: "Favourites", fields: [favourite_ids], references: [id])
  packs     Pack[]     @relation(name: "Ownership", fields: [pack_ids], references: [id])
  item      Item?      @relation(fields: [item_id], references: [id])
  templates Template[]
  trips     Trip[]

  @@index([email], map: "email_1")
  @@index([role], map: "role_1")
  @@index([code], map: "code_1")
  @@map("users")
}

model Conversation {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  v       Int    @map("__v")
  userId  String
  history String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("conversations")
}

//  ████████ ██    ██ ██████  ███████ ███████ 
//     ██     ██  ██  ██   ██ ██      ██      
//     ██      ████   ██████  █████   ███████ 
//     ██       ██    ██      ██           ██ 
//     ██       ██    ██      ███████ ███████ 

type GeoJSONGeometry {
  coordinates Json
  type        GeoJSONGeometryType
}

type PacksGrades {
  essentialItems           String @default("")
  redundancyAndVersatility String @default("")
  weight                   String @default("")
}

type PacksScores {
  essentialItemsScore           Int @default(0)
  redundancyAndVersatilityScore Int @default(0)
  weightScore                   Int @default(0)
}

//  ███████ ███    ██ ██    ██ ███    ███ ███████ 
//  ██      ████   ██ ██    ██ ████  ████ ██      
//  █████   ██ ██  ██ ██    ██ ██ ████ ██ ███████ 
//  ██      ██  ██ ██ ██    ██ ██  ██  ██      ██ 
//  ███████ ██   ████  ██████  ██      ██ ███████ 

enum Role {
  user
  admin
}

enum ItemCategoryName {
  Food
  Water
  Essentials
}

enum TemplateType {
  pack
  trip
  item
}

enum GeoJSONGeometryType {
  Point
  LineString
  Polygon
  MultiPoint
  MultiPolygon
  MultiLineString
}
