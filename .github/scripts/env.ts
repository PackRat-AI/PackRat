import * as path from 'node:path';
import * as fs from 'fs-extra';

const isCI = process.env.CI === 'true';
if (isCI) {
  console.log('🏃 CI detected, skipping .env.local generation');
  process.exit(0);
}

console.log('🔥 Generating .env.local files');

const autogeneratedComment =
  '# This file is autogenerated. To make changes, modify the root level .env.local file and run bun install. You might need to directly run bun postinstall to trigger the env shim script. \n\n';
const outputName = '.env.local';

// Read the .env file
const envFilePath = path.join(__dirname, '..', '..', outputName);
if (!fs.existsSync(envFilePath)) {
  console.log('🛑 .env file does not exist');
  process.exit(0);
}
const envFileContent = fs.readFileSync(envFilePath, 'utf8');

/**
 * Generate Expo .env file content
 */
const expoOutputPath = path.join(__dirname, '..', '..', 'apps', 'expo', outputName);
const expoFileContent = envFileContent
  .split('\n')
  .map((line) => {
    if (line.startsWith('PUBLIC_APP=')) {
      return 'EXPO_PUBLIC_APP=expo';
    } else if (line.startsWith('PUBLIC_')) {
      return line.replace(/^PUBLIC_/, 'EXPO_PUBLIC_');
    }
    return line;
  })
  .join('\n');
const expoNoTelemetry = 'EXPO_NO_TELEMETRY=true';
fs.writeFileSync(expoOutputPath, `${autogeneratedComment}\n${expoFileContent}\n${expoNoTelemetry}`);

/**
 * Generate API .dev.vars file content
 */
const apiOutputPath = path.join(__dirname, '..', '..', 'packages', 'api', '.dev.vars');
const apiFileContent = envFileContent
  .split('\n')
  .map((line) => {
    if (line.startsWith('ENVIRONMENT=')) {
      return 'ENVIRONMENT=dev';
    }
    return line;
  })
  .join('\n');
fs.writeFileSync(apiOutputPath, `${autogeneratedComment}\n${apiFileContent}`);

console.log('✅ .env.local files generated successfully');
