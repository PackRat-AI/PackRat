import * as fs from 'fs-extra';
import * as path from 'path';

const isCI = process.env.CI === 'true';
if (isCI) {
  console.log('🏃 CI detected, skipping .env.local generation');
  process.exit(0);
}

console.log('🔥 Generating .env.local files');

const autogeneratedComment =
  '# This file is autogenerated. To make changes, modify the root level .env.local file and run bun install. You might need to directly run bun postinstall to trigger the env shim script. \n\n';
const outputName = '.env.local';

// Read the .env file
const envFilePath = path.join(__dirname, '..', '..', outputName);
if (!fs.existsSync(envFilePath)) {
  console.log('🛑 .env file does not exist');
  process.exit(0);
}
const envFileContent = fs.readFileSync(envFilePath, 'utf8');

/**
 * Generate Expo .env file content
 */
const expoOutputPath = path.join(
  __dirname,
  '..',
  '..',
  'apps',
  'expo',
  outputName,
);
const expoFileContent = envFileContent
  .split('\n')
  .map((line) => {
    if (line.startsWith('PUBLIC_APP=')) {
      return 'EXPO_PUBLIC_APP=expo';
    } else if (line.startsWith('PUBLIC_')) {
      return line.replace(/^PUBLIC_/, 'EXPO_PUBLIC_');
    }
    return line;
  })
  .join('\n');
const expoNoTelemetry = 'EXPO_NO_TELEMETRY=true';
fs.writeFileSync(
  expoOutputPath,
  `${autogeneratedComment}\n${expoFileContent}\n${expoNoTelemetry}`,
);

/**
 * Generate Next.js .env file content
 */
const nextOutputPath = path.join(
  __dirname,
  '..',
  '..',
  'apps',
  'next',
  outputName,
);
const nextFileContent = envFileContent
  .split('\n')
  .map((line) => {
    if (line.startsWith('PUBLIC_APP=')) {
      return 'NEXT_PUBLIC_APP=next';
    } else if (line.startsWith('PUBLIC_')) {
      return line.replace(/^PUBLIC_/, 'NEXT_PUBLIC_');
    }
  })
  .join('\n');
fs.writeFileSync(nextOutputPath, `${autogeneratedComment}\n${nextFileContent}`);

/**
 * Generate Vite.js .env file content
 */
const viteOutputPath = path.join(
  __dirname,
  '..',
  '..',
  'apps',
  'vite',
  outputName,
);
const viteFileContent = envFileContent
  .split('\n')
  .map((line) => {
    if (line.startsWith('PUBLIC_APP=')) {
      return 'VITE_PUBLIC_APP=vite';
    } else if (line.startsWith('PUBLIC_')) {
      return line.replace(/^PUBLIC_/, 'VITE_PUBLIC_');
    }
  })
  .join('\n');
fs.writeFileSync(viteOutputPath, `${autogeneratedComment}\n${viteFileContent}`);

/**
 * Generate Tauri .env file content
 */
const tauriOutputPath = path.join(
  __dirname,
  '..',
  '..',
  'apps',
  'tauri',
  outputName,
);

const tauriFileContent = envFileContent
  .split('\n')
  .map((line) => {
    if (line.startsWith('PUBLIC_APP=')) {
      return 'VITE_PUBLIC_APP=tauri';
    } else if (line.startsWith('PUBLIC_')) {
      // We use Vite's env variables in Tauri
      return line.replace(/^PUBLIC_/, 'VITE_PUBLIC_');
    }
  })
  .join('\n');
fs.writeFileSync(
  tauriOutputPath,
  `${autogeneratedComment}\n${tauriFileContent}`,
);

// TODO: Add wrangler env generation
/**
 * Generate Cloudflare Wrangler .dev.vars file content
 */
// const wranglerOutputPath = path.join(__dirname, '..', '..', 'packages', 'api', '.dev.vars')
// // Remove public variables from output
// const wranglerFileContent = envFileContent
//   .split('\n')
//   .map((line) => {
//     if (line.startsWith('PUBLIC_APP_URL')) return line.replace(/^PUBLIC_APP_URL/, 'APP_URL')
//     if (!line.startsWith('PUBLIC_')) {
//       return line
//     }
//   })
//   .join('\n')
// const noD1Warning = 'NO_D1_WARNING=true'
// fs.writeFileSync(
//   wranglerOutputPath,
//   `${autogeneratedComment}\n${wranglerFileContent}\n${noD1Warning}`
// )
