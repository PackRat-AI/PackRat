name: Run Tests

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Find or create comment
        uses: actions/github-script@v6
        id: find_or_create_comment
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentIdentifier = '<!-- test_results -->';
            const commentBody = `${commentIdentifier}\nüöÄ Running tests... Please wait for the results! üïê`;

            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(comment => comment.body.startsWith(commentIdentifier));

            if (existingComment) {
              core.setOutput('comment_id', existingComment.id);
            } else {
              const { data: { id: commentId } } = await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              core.setOutput('comment_id', commentId);
            }

      - name: Install dependencies
        uses: ./.github/actions/install-deps

      - name: Run tests
        id: run_tests
        run: |
          yarn test
        continue-on-error: true

      - name: Update comment with test results
        uses: actions/github-script@v6
        if: always() && github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentId = process.env.COMMENT_ID;
            const testLogs = `${{ steps.run_tests.outputs.stdout }}\n${{ steps.run_tests.outputs.stderr }}`;
            const testStatus = `${{ steps.run_tests.outcome }}`;

            let commentBody = '<!-- test_results -->\n';
            let emoji = '';

            if (testStatus === 'success') {
              commentBody += '‚úÖ Tests passed successfully! üéâ\n\n';
              emoji = 'üíö';
            } else {
              commentBody += '‚ùå Tests failed for this pull request. üòû\n\n';
              emoji = '‚ù§Ô∏è';
            }

            commentBody += `<details><summary>Test Logs</summary>\n\n\`\`\`\n${testLogs}\n\`\`\`\n</details>`;

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: commentBody
            });

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [`tests-${testStatus}${emoji}`]
            });
        env:
          COMMENT_ID: ${{ steps.find_or_create_comment.outputs.comment_id }}
